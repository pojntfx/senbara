//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OidcScopes = "oidc.Scopes"
)

// Activity defines model for Activity.
type Activity struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *int64              `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// ActivityWithContact defines model for ActivityWithContact.
type ActivityWithContact struct {
	ActivityId  *int64              `json:"activity_id,omitempty"`
	ContactId   *int64              `json:"contact_id,omitempty"`
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description,omitempty"`
	FirstName   *string             `json:"first_name,omitempty"`
	LastName    *string             `json:"last_name,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	Address   *string              `json:"address,omitempty"`
	Birthday  *openapi_types.Date  `json:"birthday"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"first_name,omitempty"`
	Id        *int64               `json:"id,omitempty"`
	LastName  *string              `json:"last_name,omitempty"`
	Nickname  *string              `json:"nickname,omitempty"`
	Notes     *string              `json:"notes,omitempty"`
	Pronouns  *string              `json:"pronouns,omitempty"`
}

// ContactData defines model for ContactData.
type ContactData struct {
	Activities *[]Activity `json:"activities,omitempty"`
	Debts      *[]Debt     `json:"debts,omitempty"`
	Entry      *Contact    `json:"entry,omitempty"`
}

// Debt defines model for Debt.
type Debt struct {
	Amount      *float32 `json:"amount,omitempty"`
	Currency    *string  `json:"currency,omitempty"`
	Description *string  `json:"description,omitempty"`
	Id          *int64   `json:"id,omitempty"`
}

// IndexData defines model for IndexData.
type IndexData struct {
	ContactsCount       *int64 `json:"contactsCount,omitempty"`
	JournalEntriesCount *int64 `json:"journalEntriesCount,omitempty"`
}

// JournalEntry defines model for JournalEntry.
type JournalEntry struct {
	Body   *string    `json:"body,omitempty"`
	Date   *time.Time `json:"date,omitempty"`
	Id     *int64     `json:"id,omitempty"`
	Rating *int32     `json:"rating,omitempty"`
	Title  *string    `json:"title,omitempty"`
}

// CreateActivityJSONBody defines parameters for CreateActivity.
type CreateActivityJSONBody struct {
	ContactId   int64              `json:"contact_id"`
	Date        openapi_types.Date `json:"date"`
	Description *string            `json:"description,omitempty"`
	Name        string             `json:"name"`
}

// UpdateActivityJSONBody defines parameters for UpdateActivity.
type UpdateActivityJSONBody struct {
	Date        openapi_types.Date `json:"date"`
	Description *string            `json:"description,omitempty"`
	Name        string             `json:"name"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Nickname  *string             `json:"nickname,omitempty"`
	Pronouns  string              `json:"pronouns"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Address   *string             `json:"address,omitempty"`
	Birthday  *openapi_types.Date `json:"birthday,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Nickname  *string             `json:"nickname,omitempty"`
	Notes     *string             `json:"notes,omitempty"`
	Pronouns  string              `json:"pronouns"`
}

// CreateDebtJSONBody defines parameters for CreateDebt.
type CreateDebtJSONBody struct {
	Amount      float32 `json:"amount"`
	ContactId   int64   `json:"contact_id"`
	Currency    string  `json:"currency"`
	Description *string `json:"description,omitempty"`
	YouOwe      bool    `json:"you_owe"`
}

// UpdateDebtJSONBody defines parameters for UpdateDebt.
type UpdateDebtJSONBody struct {
	Amount      float32 `json:"amount"`
	Currency    string  `json:"currency"`
	Description *string `json:"description,omitempty"`
	YouOwe      bool    `json:"you_owe"`
}

// CreateJournalEntryJSONBody defines parameters for CreateJournalEntry.
type CreateJournalEntryJSONBody struct {
	Body   string `json:"body"`
	Rating int32  `json:"rating"`
	Title  string `json:"title"`
}

// UpdateJournalEntryJSONBody defines parameters for UpdateJournalEntry.
type UpdateJournalEntryJSONBody struct {
	Body   string `json:"body"`
	Rating int32  `json:"rating"`
	Title  string `json:"title"`
}

// ImportUserDataMultipartBody defines parameters for ImportUserData.
type ImportUserDataMultipartBody struct {
	UserData *openapi_types.File `json:"userData,omitempty"`
}

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody CreateActivityJSONBody

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody UpdateActivityJSONBody

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// CreateDebtJSONRequestBody defines body for CreateDebt for application/json ContentType.
type CreateDebtJSONRequestBody CreateDebtJSONBody

// UpdateDebtJSONRequestBody defines body for UpdateDebt for application/json ContentType.
type UpdateDebtJSONRequestBody UpdateDebtJSONBody

// CreateJournalEntryJSONRequestBody defines body for CreateJournalEntry for application/json ContentType.
type CreateJournalEntryJSONRequestBody CreateJournalEntryJSONBody

// UpdateJournalEntryJSONRequestBody defines body for UpdateJournalEntry for application/json ContentType.
type UpdateJournalEntryJSONRequestBody UpdateJournalEntryJSONBody

// ImportUserDataMultipartRequestBody defines body for ImportUserData for multipart/form-data ContentType.
type ImportUserDataMultipartRequestBody ImportUserDataMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetIndex request
	GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateActivityWithBody request with any body
	CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActivity request
	DeleteActivity(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivity request
	GetActivity(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateActivityWithBody request with any body
	UpdateActivityWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateActivity(ctx context.Context, id int64, body UpdateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceCode request
	GetSourceCode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContacts request
	GetContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactWithBody request with any body
	CreateContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContact(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContact request
	DeleteContact(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContact request
	GetContact(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactWithBody request with any body
	UpdateContactWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContact(ctx context.Context, id int64, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDebtWithBody request with any body
	CreateDebtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDebt(ctx context.Context, body CreateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SettleDebt request
	SettleDebt(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDebtWithBody request with any body
	UpdateDebtWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDebt(ctx context.Context, id int64, body UpdateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalEntries request
	GetJournalEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJournalEntryWithBody request with any body
	CreateJournalEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJournalEntry(ctx context.Context, body CreateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJournalEntry request
	DeleteJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalEntry request
	GetJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJournalEntryWithBody request with any body
	UpdateJournalEntryWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJournalEntry(ctx context.Context, id int64, body UpdateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenAPISpec request
	GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserData request
	DeleteUserData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportUserData request
	ExportUserData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportUserDataWithBody request with any body
	ImportUserDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActivity(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActivityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivity(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateActivityWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateActivityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateActivity(ctx context.Context, id int64, body UpdateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateActivityRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceCode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceCodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContact(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContact(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContact(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContact(ctx context.Context, id int64, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDebtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDebtRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDebt(ctx context.Context, body CreateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDebtRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SettleDebt(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSettleDebtRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDebtWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDebtRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDebt(ctx context.Context, id int64, body UpdateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDebtRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJournalEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJournalEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJournalEntry(ctx context.Context, body CreateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJournalEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJournalEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJournalEntryWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJournalEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJournalEntry(ctx context.Context, id int64, body UpdateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJournalEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenAPISpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportUserData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportUserDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportUserDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportUserDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetIndexRequest generates requests for GetIndex
func NewGetIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateActivityRequest calls the generic CreateActivity builder with application/json body
func NewCreateActivityRequest(server string, body CreateActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateActivityRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateActivityRequestWithBody generates requests for CreateActivity with any type of body
func NewCreateActivityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActivityRequest generates requests for DeleteActivity
func NewDeleteActivityRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityRequest generates requests for GetActivity
func NewGetActivityRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateActivityRequest calls the generic UpdateActivity builder with application/json body
func NewUpdateActivityRequest(server string, id int64, body UpdateActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateActivityRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateActivityRequestWithBody generates requests for UpdateActivity with any type of body
func NewUpdateActivityRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceCodeRequest generates requests for GetSourceCode
func NewGetSourceCodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/code/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactsRequest generates requests for GetContacts
func NewGetContactsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactRequest calls the generic CreateContact builder with application/json body
func NewCreateContactRequest(server string, body CreateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactRequestWithBody generates requests for CreateContact with any type of body
func NewCreateContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactRequest generates requests for DeleteContact
func NewDeleteContactRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactRequest generates requests for GetContact
func NewGetContactRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactRequest calls the generic UpdateContact builder with application/json body
func NewUpdateContactRequest(server string, id int64, body UpdateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateContactRequestWithBody generates requests for UpdateContact with any type of body
func NewUpdateContactRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDebtRequest calls the generic CreateDebt builder with application/json body
func NewCreateDebtRequest(server string, body CreateDebtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDebtRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDebtRequestWithBody generates requests for CreateDebt with any type of body
func NewCreateDebtRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSettleDebtRequest generates requests for SettleDebt
func NewSettleDebtRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDebtRequest calls the generic UpdateDebt builder with application/json body
func NewUpdateDebtRequest(server string, id int64, body UpdateDebtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDebtRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateDebtRequestWithBody generates requests for UpdateDebt with any type of body
func NewUpdateDebtRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/debts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJournalEntriesRequest generates requests for GetJournalEntries
func NewGetJournalEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJournalEntryRequest calls the generic CreateJournalEntry builder with application/json body
func NewCreateJournalEntryRequest(server string, body CreateJournalEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJournalEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJournalEntryRequestWithBody generates requests for CreateJournalEntry with any type of body
func NewCreateJournalEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJournalEntryRequest generates requests for DeleteJournalEntry
func NewDeleteJournalEntryRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJournalEntryRequest generates requests for GetJournalEntry
func NewGetJournalEntryRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJournalEntryRequest calls the generic UpdateJournalEntry builder with application/json body
func NewUpdateJournalEntryRequest(server string, id int64, body UpdateJournalEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJournalEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateJournalEntryRequestWithBody generates requests for UpdateJournalEntry with any type of body
func NewUpdateJournalEntryRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenAPISpecRequest generates requests for GetOpenAPISpec
func NewGetOpenAPISpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserDataRequest generates requests for DeleteUserData
func NewDeleteUserDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportUserDataRequest generates requests for ExportUserData
func NewExportUserDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportUserDataRequestWithBody generates requests for ImportUserData with any type of body
func NewImportUserDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userdata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetIndexWithResponse request
	GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error)

	// CreateActivityWithBodyWithResponse request with any body
	CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	// DeleteActivityWithResponse request
	DeleteActivityWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error)

	// GetActivityWithResponse request
	GetActivityWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetActivityResponse, error)

	// UpdateActivityWithBodyWithResponse request with any body
	UpdateActivityWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error)

	UpdateActivityWithResponse(ctx context.Context, id int64, body UpdateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error)

	// GetSourceCodeWithResponse request
	GetSourceCodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSourceCodeResponse, error)

	// GetContactsWithResponse request
	GetContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactsResponse, error)

	// CreateContactWithBodyWithResponse request with any body
	CreateContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactResponse, error)

	CreateContactWithResponse(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactResponse, error)

	// DeleteContactWithResponse request
	DeleteContactWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteContactResponse, error)

	// GetContactWithResponse request
	GetContactWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetContactResponse, error)

	// UpdateContactWithBodyWithResponse request with any body
	UpdateContactWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	UpdateContactWithResponse(ctx context.Context, id int64, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	// CreateDebtWithBodyWithResponse request with any body
	CreateDebtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDebtResponse, error)

	CreateDebtWithResponse(ctx context.Context, body CreateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDebtResponse, error)

	// SettleDebtWithResponse request
	SettleDebtWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*SettleDebtResponse, error)

	// UpdateDebtWithBodyWithResponse request with any body
	UpdateDebtWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDebtResponse, error)

	UpdateDebtWithResponse(ctx context.Context, id int64, body UpdateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDebtResponse, error)

	// GetJournalEntriesWithResponse request
	GetJournalEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJournalEntriesResponse, error)

	// CreateJournalEntryWithBodyWithResponse request with any body
	CreateJournalEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error)

	CreateJournalEntryWithResponse(ctx context.Context, body CreateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error)

	// DeleteJournalEntryWithResponse request
	DeleteJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJournalEntryResponse, error)

	// GetJournalEntryWithResponse request
	GetJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetJournalEntryResponse, error)

	// UpdateJournalEntryWithBodyWithResponse request with any body
	UpdateJournalEntryWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error)

	UpdateJournalEntryWithResponse(ctx context.Context, id int64, body UpdateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error)

	// GetOpenAPISpecWithResponse request
	GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error)

	// DeleteUserDataWithResponse request
	DeleteUserDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserDataResponse, error)

	// ExportUserDataWithResponse request
	ExportUserDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportUserDataResponse, error)

	// ImportUserDataWithBodyWithResponse request with any body
	ImportUserDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportUserDataResponse, error)
}

type GetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexData
}

// Status returns HTTPResponse.Status
func (r GetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Activity
}

// Status returns HTTPResponse.Status
func (r CreateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r DeleteActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityWithContact
}

// Status returns HTTPResponse.Status
func (r GetActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Activity
}

// Status returns HTTPResponse.Status
func (r UpdateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSourceCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contact
}

// Status returns HTTPResponse.Status
func (r GetContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r CreateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r DeleteContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactData
}

// Status returns HTTPResponse.Status
func (r GetContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r UpdateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDebtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Debt
}

// Status returns HTTPResponse.Status
func (r CreateDebtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDebtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SettleDebtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r SettleDebtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SettleDebtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDebtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Debt
}

// Status returns HTTPResponse.Status
func (r UpdateDebtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDebtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]JournalEntry
}

// Status returns HTTPResponse.Status
func (r GetJournalEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
}

// Status returns HTTPResponse.Status
func (r CreateJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r DeleteJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
}

// Status returns HTTPResponse.Status
func (r GetJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
}

// Status returns HTTPResponse.Status
func (r UpdateJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenAPISpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOpenAPISpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenAPISpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportUserDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportUserDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportUserDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportUserDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportUserDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportUserDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetIndexWithResponse request returning *GetIndexResponse
func (c *ClientWithResponses) GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error) {
	rsp, err := c.GetIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexResponse(rsp)
}

// CreateActivityWithBodyWithResponse request with arbitrary body returning *CreateActivityResponse
func (c *ClientWithResponses) CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

func (c *ClientWithResponses) CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

// DeleteActivityWithResponse request returning *DeleteActivityResponse
func (c *ClientWithResponses) DeleteActivityWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error) {
	rsp, err := c.DeleteActivity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActivityResponse(rsp)
}

// GetActivityWithResponse request returning *GetActivityResponse
func (c *ClientWithResponses) GetActivityWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetActivityResponse, error) {
	rsp, err := c.GetActivity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityResponse(rsp)
}

// UpdateActivityWithBodyWithResponse request with arbitrary body returning *UpdateActivityResponse
func (c *ClientWithResponses) UpdateActivityWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error) {
	rsp, err := c.UpdateActivityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateActivityResponse(rsp)
}

func (c *ClientWithResponses) UpdateActivityWithResponse(ctx context.Context, id int64, body UpdateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error) {
	rsp, err := c.UpdateActivity(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateActivityResponse(rsp)
}

// GetSourceCodeWithResponse request returning *GetSourceCodeResponse
func (c *ClientWithResponses) GetSourceCodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSourceCodeResponse, error) {
	rsp, err := c.GetSourceCode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceCodeResponse(rsp)
}

// GetContactsWithResponse request returning *GetContactsResponse
func (c *ClientWithResponses) GetContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactsResponse, error) {
	rsp, err := c.GetContacts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsResponse(rsp)
}

// CreateContactWithBodyWithResponse request with arbitrary body returning *CreateContactResponse
func (c *ClientWithResponses) CreateContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactResponse, error) {
	rsp, err := c.CreateContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactResponse(rsp)
}

func (c *ClientWithResponses) CreateContactWithResponse(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactResponse, error) {
	rsp, err := c.CreateContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactResponse(rsp)
}

// DeleteContactWithResponse request returning *DeleteContactResponse
func (c *ClientWithResponses) DeleteContactWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteContactResponse, error) {
	rsp, err := c.DeleteContact(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactResponse(rsp)
}

// GetContactWithResponse request returning *GetContactResponse
func (c *ClientWithResponses) GetContactWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetContactResponse, error) {
	rsp, err := c.GetContact(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactResponse(rsp)
}

// UpdateContactWithBodyWithResponse request with arbitrary body returning *UpdateContactResponse
func (c *ClientWithResponses) UpdateContactWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContactWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactWithResponse(ctx context.Context, id int64, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContact(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

// CreateDebtWithBodyWithResponse request with arbitrary body returning *CreateDebtResponse
func (c *ClientWithResponses) CreateDebtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDebtResponse, error) {
	rsp, err := c.CreateDebtWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDebtResponse(rsp)
}

func (c *ClientWithResponses) CreateDebtWithResponse(ctx context.Context, body CreateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDebtResponse, error) {
	rsp, err := c.CreateDebt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDebtResponse(rsp)
}

// SettleDebtWithResponse request returning *SettleDebtResponse
func (c *ClientWithResponses) SettleDebtWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*SettleDebtResponse, error) {
	rsp, err := c.SettleDebt(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSettleDebtResponse(rsp)
}

// UpdateDebtWithBodyWithResponse request with arbitrary body returning *UpdateDebtResponse
func (c *ClientWithResponses) UpdateDebtWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDebtResponse, error) {
	rsp, err := c.UpdateDebtWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDebtResponse(rsp)
}

func (c *ClientWithResponses) UpdateDebtWithResponse(ctx context.Context, id int64, body UpdateDebtJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDebtResponse, error) {
	rsp, err := c.UpdateDebt(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDebtResponse(rsp)
}

// GetJournalEntriesWithResponse request returning *GetJournalEntriesResponse
func (c *ClientWithResponses) GetJournalEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJournalEntriesResponse, error) {
	rsp, err := c.GetJournalEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalEntriesResponse(rsp)
}

// CreateJournalEntryWithBodyWithResponse request with arbitrary body returning *CreateJournalEntryResponse
func (c *ClientWithResponses) CreateJournalEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error) {
	rsp, err := c.CreateJournalEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJournalEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateJournalEntryWithResponse(ctx context.Context, body CreateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error) {
	rsp, err := c.CreateJournalEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJournalEntryResponse(rsp)
}

// DeleteJournalEntryWithResponse request returning *DeleteJournalEntryResponse
func (c *ClientWithResponses) DeleteJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJournalEntryResponse, error) {
	rsp, err := c.DeleteJournalEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJournalEntryResponse(rsp)
}

// GetJournalEntryWithResponse request returning *GetJournalEntryResponse
func (c *ClientWithResponses) GetJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetJournalEntryResponse, error) {
	rsp, err := c.GetJournalEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalEntryResponse(rsp)
}

// UpdateJournalEntryWithBodyWithResponse request with arbitrary body returning *UpdateJournalEntryResponse
func (c *ClientWithResponses) UpdateJournalEntryWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error) {
	rsp, err := c.UpdateJournalEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJournalEntryResponse(rsp)
}

func (c *ClientWithResponses) UpdateJournalEntryWithResponse(ctx context.Context, id int64, body UpdateJournalEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error) {
	rsp, err := c.UpdateJournalEntry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJournalEntryResponse(rsp)
}

// GetOpenAPISpecWithResponse request returning *GetOpenAPISpecResponse
func (c *ClientWithResponses) GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error) {
	rsp, err := c.GetOpenAPISpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenAPISpecResponse(rsp)
}

// DeleteUserDataWithResponse request returning *DeleteUserDataResponse
func (c *ClientWithResponses) DeleteUserDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserDataResponse, error) {
	rsp, err := c.DeleteUserData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDataResponse(rsp)
}

// ExportUserDataWithResponse request returning *ExportUserDataResponse
func (c *ClientWithResponses) ExportUserDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportUserDataResponse, error) {
	rsp, err := c.ExportUserData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportUserDataResponse(rsp)
}

// ImportUserDataWithBodyWithResponse request with arbitrary body returning *ImportUserDataResponse
func (c *ClientWithResponses) ImportUserDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportUserDataResponse, error) {
	rsp, err := c.ImportUserDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportUserDataResponse(rsp)
}

// ParseGetIndexResponse parses an HTTP response from a GetIndexWithResponse call
func ParseGetIndexResponse(rsp *http.Response) (*GetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateActivityResponse parses an HTTP response from a CreateActivityWithResponse call
func ParseCreateActivityResponse(rsp *http.Response) (*CreateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActivityResponse parses an HTTP response from a DeleteActivityWithResponse call
func ParseDeleteActivityResponse(rsp *http.Response) (*DeleteActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityResponse parses an HTTP response from a GetActivityWithResponse call
func ParseGetActivityResponse(rsp *http.Response) (*GetActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityWithContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateActivityResponse parses an HTTP response from a UpdateActivityWithResponse call
func ParseUpdateActivityResponse(rsp *http.Response) (*UpdateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Activity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSourceCodeResponse parses an HTTP response from a GetSourceCodeWithResponse call
func ParseGetSourceCodeResponse(rsp *http.Response) (*GetSourceCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactsResponse parses an HTTP response from a GetContactsWithResponse call
func ParseGetContactsResponse(rsp *http.Response) (*GetContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactResponse parses an HTTP response from a CreateContactWithResponse call
func ParseCreateContactResponse(rsp *http.Response) (*CreateContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactResponse parses an HTTP response from a DeleteContactWithResponse call
func ParseDeleteContactResponse(rsp *http.Response) (*DeleteContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactResponse parses an HTTP response from a GetContactWithResponse call
func ParseGetContactResponse(rsp *http.Response) (*GetContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactResponse parses an HTTP response from a UpdateContactWithResponse call
func ParseUpdateContactResponse(rsp *http.Response) (*UpdateContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDebtResponse parses an HTTP response from a CreateDebtWithResponse call
func ParseCreateDebtResponse(rsp *http.Response) (*CreateDebtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDebtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Debt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSettleDebtResponse parses an HTTP response from a SettleDebtWithResponse call
func ParseSettleDebtResponse(rsp *http.Response) (*SettleDebtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SettleDebtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDebtResponse parses an HTTP response from a UpdateDebtWithResponse call
func ParseUpdateDebtResponse(rsp *http.Response) (*UpdateDebtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDebtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Debt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJournalEntriesResponse parses an HTTP response from a GetJournalEntriesWithResponse call
func ParseGetJournalEntriesResponse(rsp *http.Response) (*GetJournalEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJournalEntryResponse parses an HTTP response from a CreateJournalEntryWithResponse call
func ParseCreateJournalEntryResponse(rsp *http.Response) (*CreateJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJournalEntryResponse parses an HTTP response from a DeleteJournalEntryWithResponse call
func ParseDeleteJournalEntryResponse(rsp *http.Response) (*DeleteJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJournalEntryResponse parses an HTTP response from a GetJournalEntryWithResponse call
func ParseGetJournalEntryResponse(rsp *http.Response) (*GetJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJournalEntryResponse parses an HTTP response from a UpdateJournalEntryWithResponse call
func ParseUpdateJournalEntryResponse(rsp *http.Response) (*UpdateJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenAPISpecResponse parses an HTTP response from a GetOpenAPISpecWithResponse call
func ParseGetOpenAPISpecResponse(rsp *http.Response) (*GetOpenAPISpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenAPISpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseDeleteUserDataResponse parses an HTTP response from a DeleteUserDataWithResponse call
func ParseDeleteUserDataResponse(rsp *http.Response) (*DeleteUserDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportUserDataResponse parses an HTTP response from a ExportUserDataWithResponse call
func ParseExportUserDataResponse(rsp *http.Response) (*ExportUserDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportUserDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportUserDataResponse parses an HTTP response from a ImportUserDataWithResponse call
func ParseImportUserDataResponse(rsp *http.Response) (*ImportUserDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportUserDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get counts of contacts and journal entries for the authenticated user
	// (GET /)
	GetIndex(w http.ResponseWriter, r *http.Request)
	// Create a new activity
	// (POST /activities)
	CreateActivity(w http.ResponseWriter, r *http.Request)
	// Delete an activity
	// (DELETE /activities/{id})
	DeleteActivity(w http.ResponseWriter, r *http.Request, id int64)
	// Get a specific activity
	// (GET /activities/{id})
	GetActivity(w http.ResponseWriter, r *http.Request, id int64)
	// Update an activity
	// (PUT /activities/{id})
	UpdateActivity(w http.ResponseWriter, r *http.Request, id int64)
	// Download application source code
	// (GET /code/)
	GetSourceCode(w http.ResponseWriter, r *http.Request)
	// List all contacts
	// (GET /contacts)
	GetContacts(w http.ResponseWriter, r *http.Request)
	// Create a new contact
	// (POST /contacts)
	CreateContact(w http.ResponseWriter, r *http.Request)
	// Delete a contact
	// (DELETE /contacts/{id})
	DeleteContact(w http.ResponseWriter, r *http.Request, id int64)
	// Get contact including debts and activities
	// (GET /contacts/{id})
	GetContact(w http.ResponseWriter, r *http.Request, id int64)
	// Update a contact
	// (PUT /contacts/{id})
	UpdateContact(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new debt
	// (POST /debts)
	CreateDebt(w http.ResponseWriter, r *http.Request)
	// Settle a debt
	// (DELETE /debts/{id})
	SettleDebt(w http.ResponseWriter, r *http.Request, id int64)
	// Update a debt
	// (PUT /debts/{id})
	UpdateDebt(w http.ResponseWriter, r *http.Request, id int64)
	// List all journal entries
	// (GET /journal)
	GetJournalEntries(w http.ResponseWriter, r *http.Request)
	// Create a new journal entry
	// (POST /journal)
	CreateJournalEntry(w http.ResponseWriter, r *http.Request)
	// Delete a journal entry
	// (DELETE /journal/{id})
	DeleteJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Get a specific journal entry
	// (GET /journal/{id})
	GetJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Update a journal entry
	// (PUT /journal/{id})
	UpdateJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Get the OpenAPI spec
	// (GET /openapi.yaml)
	GetOpenAPISpec(w http.ResponseWriter, r *http.Request)
	// Delete all user data
	// (DELETE /userdata)
	DeleteUserData(w http.ResponseWriter, r *http.Request)
	// Export all user data
	// (GET /userdata)
	ExportUserData(w http.ResponseWriter, r *http.Request)
	// Import user data
	// (POST /userdata)
	ImportUserData(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetIndex operation middleware
func (siw *ServerInterfaceWrapper) GetIndex(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIndex(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateActivity operation middleware
func (siw *ServerInterfaceWrapper) CreateActivity(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateActivity(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteActivity operation middleware
func (siw *ServerInterfaceWrapper) DeleteActivity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteActivity(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetActivity operation middleware
func (siw *ServerInterfaceWrapper) GetActivity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActivity(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateActivity operation middleware
func (siw *ServerInterfaceWrapper) UpdateActivity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateActivity(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSourceCode operation middleware
func (siw *ServerInterfaceWrapper) GetSourceCode(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSourceCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetContacts operation middleware
func (siw *ServerInterfaceWrapper) GetContacts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContacts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateContact operation middleware
func (siw *ServerInterfaceWrapper) CreateContact(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateContact(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteContact operation middleware
func (siw *ServerInterfaceWrapper) DeleteContact(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteContact(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetContact operation middleware
func (siw *ServerInterfaceWrapper) GetContact(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContact(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateContact operation middleware
func (siw *ServerInterfaceWrapper) UpdateContact(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateContact(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDebt operation middleware
func (siw *ServerInterfaceWrapper) CreateDebt(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDebt(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SettleDebt operation middleware
func (siw *ServerInterfaceWrapper) SettleDebt(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SettleDebt(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDebt operation middleware
func (siw *ServerInterfaceWrapper) UpdateDebt(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDebt(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJournalEntries operation middleware
func (siw *ServerInterfaceWrapper) GetJournalEntries(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJournalEntries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) CreateJournalEntry(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateJournalEntry(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) DeleteJournalEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) GetJournalEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) UpdateJournalEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOpenAPISpec operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPISpec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserData operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExportUserData operation middleware
func (siw *ServerInterfaceWrapper) ExportUserData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExportUserData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ImportUserData operation middleware
func (siw *ServerInterfaceWrapper) ImportUserData(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportUserData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.GetIndex)
	m.HandleFunc("POST "+options.BaseURL+"/activities", wrapper.CreateActivity)
	m.HandleFunc("DELETE "+options.BaseURL+"/activities/{id}", wrapper.DeleteActivity)
	m.HandleFunc("GET "+options.BaseURL+"/activities/{id}", wrapper.GetActivity)
	m.HandleFunc("PUT "+options.BaseURL+"/activities/{id}", wrapper.UpdateActivity)
	m.HandleFunc("GET "+options.BaseURL+"/code/", wrapper.GetSourceCode)
	m.HandleFunc("GET "+options.BaseURL+"/contacts", wrapper.GetContacts)
	m.HandleFunc("POST "+options.BaseURL+"/contacts", wrapper.CreateContact)
	m.HandleFunc("DELETE "+options.BaseURL+"/contacts/{id}", wrapper.DeleteContact)
	m.HandleFunc("GET "+options.BaseURL+"/contacts/{id}", wrapper.GetContact)
	m.HandleFunc("PUT "+options.BaseURL+"/contacts/{id}", wrapper.UpdateContact)
	m.HandleFunc("POST "+options.BaseURL+"/debts", wrapper.CreateDebt)
	m.HandleFunc("DELETE "+options.BaseURL+"/debts/{id}", wrapper.SettleDebt)
	m.HandleFunc("PUT "+options.BaseURL+"/debts/{id}", wrapper.UpdateDebt)
	m.HandleFunc("GET "+options.BaseURL+"/journal", wrapper.GetJournalEntries)
	m.HandleFunc("POST "+options.BaseURL+"/journal", wrapper.CreateJournalEntry)
	m.HandleFunc("DELETE "+options.BaseURL+"/journal/{id}", wrapper.DeleteJournalEntry)
	m.HandleFunc("GET "+options.BaseURL+"/journal/{id}", wrapper.GetJournalEntry)
	m.HandleFunc("PUT "+options.BaseURL+"/journal/{id}", wrapper.UpdateJournalEntry)
	m.HandleFunc("GET "+options.BaseURL+"/openapi.yaml", wrapper.GetOpenAPISpec)
	m.HandleFunc("DELETE "+options.BaseURL+"/userdata", wrapper.DeleteUserData)
	m.HandleFunc("GET "+options.BaseURL+"/userdata", wrapper.ExportUserData)
	m.HandleFunc("POST "+options.BaseURL+"/userdata", wrapper.ImportUserData)

	return m
}

type GetIndexRequestObject struct {
}

type GetIndexResponseObject interface {
	VisitGetIndexResponse(w http.ResponseWriter) error
}

type GetIndex200JSONResponse IndexData

func (response GetIndex200JSONResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIndex403TextResponse string

func (response GetIndex403TextResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetIndex500TextResponse string

func (response GetIndex500TextResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateActivityRequestObject struct {
	Body *CreateActivityJSONRequestBody
}

type CreateActivityResponseObject interface {
	VisitCreateActivityResponse(w http.ResponseWriter) error
}

type CreateActivity200JSONResponse Activity

func (response CreateActivity200JSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivity403TextResponse string

func (response CreateActivity403TextResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type CreateActivity500TextResponse string

func (response CreateActivity500TextResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteActivityRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteActivityResponseObject interface {
	VisitDeleteActivityResponse(w http.ResponseWriter) error
}

type DeleteActivity200JSONResponse int64

func (response DeleteActivity200JSONResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteActivity403TextResponse string

func (response DeleteActivity403TextResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteActivity500TextResponse string

func (response DeleteActivity500TextResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetActivityRequestObject struct {
	Id int64 `json:"id"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse ActivityWithContact

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivity403TextResponse string

func (response GetActivity403TextResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetActivity500TextResponse string

func (response GetActivity500TextResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateActivityRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateActivityJSONRequestBody
}

type UpdateActivityResponseObject interface {
	VisitUpdateActivityResponse(w http.ResponseWriter) error
}

type UpdateActivity200JSONResponse Activity

func (response UpdateActivity200JSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateActivity403TextResponse string

func (response UpdateActivity403TextResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateActivity500TextResponse string

func (response UpdateActivity500TextResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetSourceCodeRequestObject struct {
}

type GetSourceCodeResponseObject interface {
	VisitGetSourceCodeResponse(w http.ResponseWriter) error
}

type GetSourceCode200ResponseHeaders struct {
	ContentDisposition string
}

type GetSourceCode200ApplicationgzipResponse struct {
	Body          io.Reader
	Headers       GetSourceCode200ResponseHeaders
	ContentLength int64
}

func (response GetSourceCode200ApplicationgzipResponse) VisitGetSourceCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/gzip")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetSourceCode500TextResponse string

func (response GetSourceCode500TextResponse) VisitGetSourceCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetContactsRequestObject struct {
}

type GetContactsResponseObject interface {
	VisitGetContactsResponse(w http.ResponseWriter) error
}

type GetContacts200JSONResponse []Contact

func (response GetContacts200JSONResponse) VisitGetContactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContacts403TextResponse string

func (response GetContacts403TextResponse) VisitGetContactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetContacts500TextResponse string

func (response GetContacts500TextResponse) VisitGetContactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateContactRequestObject struct {
	Body *CreateContactJSONRequestBody
}

type CreateContactResponseObject interface {
	VisitCreateContactResponse(w http.ResponseWriter) error
}

type CreateContact200JSONResponse Contact

func (response CreateContact200JSONResponse) VisitCreateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateContact403TextResponse string

func (response CreateContact403TextResponse) VisitCreateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type CreateContact500TextResponse string

func (response CreateContact500TextResponse) VisitCreateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteContactRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteContactResponseObject interface {
	VisitDeleteContactResponse(w http.ResponseWriter) error
}

type DeleteContact200JSONResponse int64

func (response DeleteContact200JSONResponse) VisitDeleteContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteContact403TextResponse string

func (response DeleteContact403TextResponse) VisitDeleteContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteContact500TextResponse string

func (response DeleteContact500TextResponse) VisitDeleteContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetContactRequestObject struct {
	Id int64 `json:"id"`
}

type GetContactResponseObject interface {
	VisitGetContactResponse(w http.ResponseWriter) error
}

type GetContact200JSONResponse ContactData

func (response GetContact200JSONResponse) VisitGetContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContact403TextResponse string

func (response GetContact403TextResponse) VisitGetContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetContact500TextResponse string

func (response GetContact500TextResponse) VisitGetContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateContactRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateContactJSONRequestBody
}

type UpdateContactResponseObject interface {
	VisitUpdateContactResponse(w http.ResponseWriter) error
}

type UpdateContact200JSONResponse Contact

func (response UpdateContact200JSONResponse) VisitUpdateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateContact403TextResponse string

func (response UpdateContact403TextResponse) VisitUpdateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateContact500TextResponse string

func (response UpdateContact500TextResponse) VisitUpdateContactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateDebtRequestObject struct {
	Body *CreateDebtJSONRequestBody
}

type CreateDebtResponseObject interface {
	VisitCreateDebtResponse(w http.ResponseWriter) error
}

type CreateDebt200JSONResponse Debt

func (response CreateDebt200JSONResponse) VisitCreateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateDebt403TextResponse string

func (response CreateDebt403TextResponse) VisitCreateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type CreateDebt500TextResponse string

func (response CreateDebt500TextResponse) VisitCreateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type SettleDebtRequestObject struct {
	Id int64 `json:"id"`
}

type SettleDebtResponseObject interface {
	VisitSettleDebtResponse(w http.ResponseWriter) error
}

type SettleDebt200JSONResponse int64

func (response SettleDebt200JSONResponse) VisitSettleDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SettleDebt403TextResponse string

func (response SettleDebt403TextResponse) VisitSettleDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type SettleDebt500TextResponse string

func (response SettleDebt500TextResponse) VisitSettleDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateDebtRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateDebtJSONRequestBody
}

type UpdateDebtResponseObject interface {
	VisitUpdateDebtResponse(w http.ResponseWriter) error
}

type UpdateDebt200JSONResponse Debt

func (response UpdateDebt200JSONResponse) VisitUpdateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDebt403TextResponse string

func (response UpdateDebt403TextResponse) VisitUpdateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateDebt500TextResponse string

func (response UpdateDebt500TextResponse) VisitUpdateDebtResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntriesRequestObject struct {
}

type GetJournalEntriesResponseObject interface {
	VisitGetJournalEntriesResponse(w http.ResponseWriter) error
}

type GetJournalEntries200JSONResponse []JournalEntry

func (response GetJournalEntries200JSONResponse) VisitGetJournalEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJournalEntries403TextResponse string

func (response GetJournalEntries403TextResponse) VisitGetJournalEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntries500TextResponse string

func (response GetJournalEntries500TextResponse) VisitGetJournalEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateJournalEntryRequestObject struct {
	Body *CreateJournalEntryJSONRequestBody
}

type CreateJournalEntryResponseObject interface {
	VisitCreateJournalEntryResponse(w http.ResponseWriter) error
}

type CreateJournalEntry200JSONResponse JournalEntry

func (response CreateJournalEntry200JSONResponse) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateJournalEntry403TextResponse string

func (response CreateJournalEntry403TextResponse) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type CreateJournalEntry500TextResponse string

func (response CreateJournalEntry500TextResponse) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteJournalEntryRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteJournalEntryResponseObject interface {
	VisitDeleteJournalEntryResponse(w http.ResponseWriter) error
}

type DeleteJournalEntry200JSONResponse int64

func (response DeleteJournalEntry200JSONResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJournalEntry403TextResponse string

func (response DeleteJournalEntry403TextResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteJournalEntry500TextResponse string

func (response DeleteJournalEntry500TextResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntryRequestObject struct {
	Id int64 `json:"id"`
}

type GetJournalEntryResponseObject interface {
	VisitGetJournalEntryResponse(w http.ResponseWriter) error
}

type GetJournalEntry200JSONResponse JournalEntry

func (response GetJournalEntry200JSONResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJournalEntry403TextResponse string

func (response GetJournalEntry403TextResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntry500TextResponse string

func (response GetJournalEntry500TextResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateJournalEntryRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateJournalEntryJSONRequestBody
}

type UpdateJournalEntryResponseObject interface {
	VisitUpdateJournalEntryResponse(w http.ResponseWriter) error
}

type UpdateJournalEntry200JSONResponse JournalEntry

func (response UpdateJournalEntry200JSONResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateJournalEntry403TextResponse string

func (response UpdateJournalEntry403TextResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateJournalEntry500TextResponse string

func (response UpdateJournalEntry500TextResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetOpenAPISpecRequestObject struct {
}

type GetOpenAPISpecResponseObject interface {
	VisitGetOpenAPISpecResponse(w http.ResponseWriter) error
}

type GetOpenAPISpec200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOpenAPISpec200ApplicationyamlResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetOpenAPISpec500TextResponse string

func (response GetOpenAPISpec500TextResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteUserDataRequestObject struct {
}

type DeleteUserDataResponseObject interface {
	VisitDeleteUserDataResponse(w http.ResponseWriter) error
}

type DeleteUserData200Response struct {
}

func (response DeleteUserData200Response) VisitDeleteUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUserData403TextResponse string

func (response DeleteUserData403TextResponse) VisitDeleteUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteUserData500TextResponse string

func (response DeleteUserData500TextResponse) VisitDeleteUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ExportUserDataRequestObject struct {
}

type ExportUserDataResponseObject interface {
	VisitExportUserDataResponse(w http.ResponseWriter) error
}

type ExportUserData200ResponseHeaders struct {
	ContentDisposition string
}

type ExportUserData200ApplicationjsonlResponse struct {
	Body          io.Reader
	Headers       ExportUserData200ResponseHeaders
	ContentLength int64
}

func (response ExportUserData200ApplicationjsonlResponse) VisitExportUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jsonl")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExportUserData403TextResponse string

func (response ExportUserData403TextResponse) VisitExportUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type ExportUserData500TextResponse string

func (response ExportUserData500TextResponse) VisitExportUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type ImportUserDataRequestObject struct {
	Body *multipart.Reader
}

type ImportUserDataResponseObject interface {
	VisitImportUserDataResponse(w http.ResponseWriter) error
}

type ImportUserData200Response struct {
}

func (response ImportUserData200Response) VisitImportUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ImportUserData403TextResponse string

func (response ImportUserData403TextResponse) VisitImportUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type ImportUserData500TextResponse string

func (response ImportUserData500TextResponse) VisitImportUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get counts of contacts and journal entries for the authenticated user
	// (GET /)
	GetIndex(ctx context.Context, request GetIndexRequestObject) (GetIndexResponseObject, error)
	// Create a new activity
	// (POST /activities)
	CreateActivity(ctx context.Context, request CreateActivityRequestObject) (CreateActivityResponseObject, error)
	// Delete an activity
	// (DELETE /activities/{id})
	DeleteActivity(ctx context.Context, request DeleteActivityRequestObject) (DeleteActivityResponseObject, error)
	// Get a specific activity
	// (GET /activities/{id})
	GetActivity(ctx context.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)
	// Update an activity
	// (PUT /activities/{id})
	UpdateActivity(ctx context.Context, request UpdateActivityRequestObject) (UpdateActivityResponseObject, error)
	// Download application source code
	// (GET /code/)
	GetSourceCode(ctx context.Context, request GetSourceCodeRequestObject) (GetSourceCodeResponseObject, error)
	// List all contacts
	// (GET /contacts)
	GetContacts(ctx context.Context, request GetContactsRequestObject) (GetContactsResponseObject, error)
	// Create a new contact
	// (POST /contacts)
	CreateContact(ctx context.Context, request CreateContactRequestObject) (CreateContactResponseObject, error)
	// Delete a contact
	// (DELETE /contacts/{id})
	DeleteContact(ctx context.Context, request DeleteContactRequestObject) (DeleteContactResponseObject, error)
	// Get contact including debts and activities
	// (GET /contacts/{id})
	GetContact(ctx context.Context, request GetContactRequestObject) (GetContactResponseObject, error)
	// Update a contact
	// (PUT /contacts/{id})
	UpdateContact(ctx context.Context, request UpdateContactRequestObject) (UpdateContactResponseObject, error)
	// Create a new debt
	// (POST /debts)
	CreateDebt(ctx context.Context, request CreateDebtRequestObject) (CreateDebtResponseObject, error)
	// Settle a debt
	// (DELETE /debts/{id})
	SettleDebt(ctx context.Context, request SettleDebtRequestObject) (SettleDebtResponseObject, error)
	// Update a debt
	// (PUT /debts/{id})
	UpdateDebt(ctx context.Context, request UpdateDebtRequestObject) (UpdateDebtResponseObject, error)
	// List all journal entries
	// (GET /journal)
	GetJournalEntries(ctx context.Context, request GetJournalEntriesRequestObject) (GetJournalEntriesResponseObject, error)
	// Create a new journal entry
	// (POST /journal)
	CreateJournalEntry(ctx context.Context, request CreateJournalEntryRequestObject) (CreateJournalEntryResponseObject, error)
	// Delete a journal entry
	// (DELETE /journal/{id})
	DeleteJournalEntry(ctx context.Context, request DeleteJournalEntryRequestObject) (DeleteJournalEntryResponseObject, error)
	// Get a specific journal entry
	// (GET /journal/{id})
	GetJournalEntry(ctx context.Context, request GetJournalEntryRequestObject) (GetJournalEntryResponseObject, error)
	// Update a journal entry
	// (PUT /journal/{id})
	UpdateJournalEntry(ctx context.Context, request UpdateJournalEntryRequestObject) (UpdateJournalEntryResponseObject, error)
	// Get the OpenAPI spec
	// (GET /openapi.yaml)
	GetOpenAPISpec(ctx context.Context, request GetOpenAPISpecRequestObject) (GetOpenAPISpecResponseObject, error)
	// Delete all user data
	// (DELETE /userdata)
	DeleteUserData(ctx context.Context, request DeleteUserDataRequestObject) (DeleteUserDataResponseObject, error)
	// Export all user data
	// (GET /userdata)
	ExportUserData(ctx context.Context, request ExportUserDataRequestObject) (ExportUserDataResponseObject, error)
	// Import user data
	// (POST /userdata)
	ImportUserData(ctx context.Context, request ImportUserDataRequestObject) (ImportUserDataResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetIndex operation middleware
func (sh *strictHandler) GetIndex(w http.ResponseWriter, r *http.Request) {
	var request GetIndexRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndex(ctx, request.(GetIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIndexResponseObject); ok {
		if err := validResponse.VisitGetIndexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateActivity operation middleware
func (sh *strictHandler) CreateActivity(w http.ResponseWriter, r *http.Request) {
	var request CreateActivityRequestObject

	var body CreateActivityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateActivity(ctx, request.(CreateActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateActivityResponseObject); ok {
		if err := validResponse.VisitCreateActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteActivity operation middleware
func (sh *strictHandler) DeleteActivity(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteActivityRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActivity(ctx, request.(DeleteActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteActivityResponseObject); ok {
		if err := validResponse.VisitDeleteActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandler) GetActivity(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetActivityRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateActivity operation middleware
func (sh *strictHandler) UpdateActivity(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateActivityRequestObject

	request.Id = id

	var body UpdateActivityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateActivity(ctx, request.(UpdateActivityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateActivity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateActivityResponseObject); ok {
		if err := validResponse.VisitUpdateActivityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSourceCode operation middleware
func (sh *strictHandler) GetSourceCode(w http.ResponseWriter, r *http.Request) {
	var request GetSourceCodeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSourceCode(ctx, request.(GetSourceCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSourceCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSourceCodeResponseObject); ok {
		if err := validResponse.VisitGetSourceCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetContacts operation middleware
func (sh *strictHandler) GetContacts(w http.ResponseWriter, r *http.Request) {
	var request GetContactsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetContacts(ctx, request.(GetContactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContacts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetContactsResponseObject); ok {
		if err := validResponse.VisitGetContactsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateContact operation middleware
func (sh *strictHandler) CreateContact(w http.ResponseWriter, r *http.Request) {
	var request CreateContactRequestObject

	var body CreateContactJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateContact(ctx, request.(CreateContactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateContact")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateContactResponseObject); ok {
		if err := validResponse.VisitCreateContactResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteContact operation middleware
func (sh *strictHandler) DeleteContact(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteContactRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteContact(ctx, request.(DeleteContactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteContact")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteContactResponseObject); ok {
		if err := validResponse.VisitDeleteContactResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetContact operation middleware
func (sh *strictHandler) GetContact(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetContactRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetContact(ctx, request.(GetContactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContact")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetContactResponseObject); ok {
		if err := validResponse.VisitGetContactResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateContact operation middleware
func (sh *strictHandler) UpdateContact(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateContactRequestObject

	request.Id = id

	var body UpdateContactJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateContact(ctx, request.(UpdateContactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateContact")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateContactResponseObject); ok {
		if err := validResponse.VisitUpdateContactResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDebt operation middleware
func (sh *strictHandler) CreateDebt(w http.ResponseWriter, r *http.Request) {
	var request CreateDebtRequestObject

	var body CreateDebtJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDebt(ctx, request.(CreateDebtRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDebt")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDebtResponseObject); ok {
		if err := validResponse.VisitCreateDebtResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SettleDebt operation middleware
func (sh *strictHandler) SettleDebt(w http.ResponseWriter, r *http.Request, id int64) {
	var request SettleDebtRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SettleDebt(ctx, request.(SettleDebtRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SettleDebt")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SettleDebtResponseObject); ok {
		if err := validResponse.VisitSettleDebtResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDebt operation middleware
func (sh *strictHandler) UpdateDebt(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateDebtRequestObject

	request.Id = id

	var body UpdateDebtJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDebt(ctx, request.(UpdateDebtRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDebt")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDebtResponseObject); ok {
		if err := validResponse.VisitUpdateDebtResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJournalEntries operation middleware
func (sh *strictHandler) GetJournalEntries(w http.ResponseWriter, r *http.Request) {
	var request GetJournalEntriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJournalEntries(ctx, request.(GetJournalEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJournalEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJournalEntriesResponseObject); ok {
		if err := validResponse.VisitGetJournalEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateJournalEntry operation middleware
func (sh *strictHandler) CreateJournalEntry(w http.ResponseWriter, r *http.Request) {
	var request CreateJournalEntryRequestObject

	var body CreateJournalEntryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJournalEntry(ctx, request.(CreateJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateJournalEntryResponseObject); ok {
		if err := validResponse.VisitCreateJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJournalEntry operation middleware
func (sh *strictHandler) DeleteJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteJournalEntryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJournalEntry(ctx, request.(DeleteJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteJournalEntryResponseObject); ok {
		if err := validResponse.VisitDeleteJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJournalEntry operation middleware
func (sh *strictHandler) GetJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetJournalEntryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJournalEntry(ctx, request.(GetJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJournalEntryResponseObject); ok {
		if err := validResponse.VisitGetJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateJournalEntry operation middleware
func (sh *strictHandler) UpdateJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateJournalEntryRequestObject

	request.Id = id

	var body UpdateJournalEntryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateJournalEntry(ctx, request.(UpdateJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateJournalEntryResponseObject); ok {
		if err := validResponse.VisitUpdateJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOpenAPISpec operation middleware
func (sh *strictHandler) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	var request GetOpenAPISpecRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOpenAPISpec(ctx, request.(GetOpenAPISpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOpenAPISpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOpenAPISpecResponseObject); ok {
		if err := validResponse.VisitGetOpenAPISpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserData operation middleware
func (sh *strictHandler) DeleteUserData(w http.ResponseWriter, r *http.Request) {
	var request DeleteUserDataRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserData(ctx, request.(DeleteUserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserDataResponseObject); ok {
		if err := validResponse.VisitDeleteUserDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExportUserData operation middleware
func (sh *strictHandler) ExportUserData(w http.ResponseWriter, r *http.Request) {
	var request ExportUserDataRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExportUserData(ctx, request.(ExportUserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExportUserData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExportUserDataResponseObject); ok {
		if err := validResponse.VisitExportUserDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportUserData operation middleware
func (sh *strictHandler) ImportUserData(w http.ResponseWriter, r *http.Request) {
	var request ImportUserDataRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportUserData(ctx, request.(ImportUserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportUserData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportUserDataResponseObject); ok {
		if err := validResponse.VisitImportUserDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb72/bvPH/Vwh+vy9lK33ybAM8DFiWZEGKbM2erNiLPkFBS2ebKUVq5CmJG/h/H0hK",
	"smT9sNymMZr4TetIPPJ497lf5OmJRipJlQSJhk6eqIkWkDD38yRCfs9xaX+nWqWgkYN7EzME+/9M6YQh",
	"nfgHAcVlCnRCDWou53QV0BhMpHmKXEk7vvGex7VpuMQ//rqeh0uEOWg7ULIEWmZYlWPV9A4itEMLtv/D",
	"cXGqJLIImztg+aDPgzmI/FTDCZ5NSDOuDX7ukEBABet7u4PguoUVxxqMaZ1/yjUuYrZs26nMhGBTAXSC",
	"OoOWnUPCuKhR+ifBzkIYrJUt0uLRl+6XCqFdCKlWUmXS7CboM4asE5n5XxwhcT/+X8OMTuj/hWtzDXNb",
	"DUtDXS/GtGZLD64pDp/pDKbYNgtI1MttxAV+WvfsZm5uNlGZxJrqZkIxXKtOZsk0N8BMa5DRslUDz+Ro",
	"2ji/lDE8tusq9wnmtLGLbgDeqUxLJs4lag47ULax9n49V4uXnqq4Q1htnmmEPGl1T4NNSzO0JBuDj39p",
	"HYwcxTDHtAqogSjTHJc3Fml+c4rHkfs/BXkZnyopIcKPWtAJDccPIMToi1QPMrTveTyKlJzxeWZZVHLN",
	"UI2aBvRxZOcdxZEeccmRMzFiUQTGjFB9ATlKlUYmRpldx3q3leUOHhGsGs5U5KNjFYv0H0oD4dKLhCtJ",
	"2FRlSHAB5AbklGlGfju/+Tc5ub4k9+9oQN3kdIGYmkkYzjkusuk4UkmYqjuJs8fQeDKnGzlTFSDan7lP",
	"pTMQPOLIzF9TdWcVA9rOQouQQP9eDCDXxYDG6uUk49okIU9SzSU2LI+WW5kpTRgxPEkFkBS0UZIJcv7b",
	"NXmAKWFpKnjk5THNuEDywHHhhHKhiEEmY6ZjIvhUM70MyAerpzOSK4qwDBcgsZiByZhcK4NzDTf/uiIx",
	"Q0YMKs3mMCZnYPhcQkyYIYxomIH1IuAYTFQMWq7lH8M9CJUmIHOGLtSYBlTwCKRxaM1ld3JxfTU6Hh/t",
	"oK5wKtQ0TBiX4dXl6fk/b86t9EyWJMwaL72uyqjkKDNcztdyiQWfBuTD5dnpxqYtpEEn5sPsBvQ9j2CA",
	"ElPN71m0DOOlZAmPaGmUtB2Y96CN1/LR+N34yLJv7YelnE7o8fjd2A5KGS6cFYT2nzlgbqTe8i5jOqEX",
	"gM6n0oBqMKmSxpv0L0dHBZbBO8UKTMI74127jzbbYtHaaTsTrYPUvazZpAbrje8hJiZz9j7LhHCR79ej",
	"4w2mEB4xTAXjG+xsOrLGsh+lxa3S/CvEduo/NPb7zVOfSGJ9q/VCBLRWmqjIxcu45j/p5FPhOT/drm6r",
	"8LsAJJENRoaoGSkCm0NZHrEI+JDlLMcismKFEJPMOP+BbG7o5BPlTsO3dvWwntKkyrSA4lQDQygzGQuN",
	"/2Zg8G95EBuMitYIvYesvTvxtjvjVjWTT1X+cpKchdtmHKyR2ox69QMNaJ1TtqAtf0cip7S3azQetIQR",
	"CQ+ErbFbGEEF+JuWED7xeOWzBQEecnWDOHPPKwaRMs0SQNDGcWS367ztOqI7ENUhElQEsj3FvP1OQG1f",
	"oRtLXg5vF0te34TJrUAKOsPqz4WWIe6neojTh55DALcBnBGTQsRnPBoAojRrAdHHNGZ78TrPEexfOHb/",
	"dOE6c8p9uybiwT3ExdpYHakYeouYG5XpCE5VDLtVMvOvPO2Im1MuLavBdmn4xYllssv5BXQBLHaW++TO",
	"HEHi6IybVBleQB8ema3Q6YQyRBYtbOn7ZzLjAiy6//I7tQuMkenx/OvvlAZ9CntZda8Dp3qQQrG4dqhg",
	"1uKp6Nj9WWjXVzh9Cj4txnyn4Q46ei2j3Obpa1M0BV+HqEevuEHChCgr1pq280cu2vVUnYXonysOPd+1",
	"xnfcVvTfSVTjWIWH6opByXU51b6jXE8mmL86lKTVkjQqgd1iE1UvOLAaXRvK6yxGCxAdalFfi/YDKNgW",
	"OH/+MrR6U9uDl0Mc9sfHXhpcRiKLuZwTd/nszpAr2XVXgO4uR18eTs+RBXxr18QP7JLYQ/PDq000DsW0",
	"L6a3JxllC0pfDu76Q57N9HZpK9n1hui7+lCWKvusHqomNlVKAJP9N0MFWVBsrcLGvm3F9ww1IWafH9Lx",
	"ajoee4wXZuLtomIjW7PwG0AUham8zhTcoca4fb5d1Hg9E9aFmN5s6YXh8eL++mXc70/rcQ95SZ6X9Hjb",
	"vKOl7+z3fa1N80VOgGvdnAOOgd9v9OUcqtDyNHijZakCg0L1286Ea8p4Lj/X2ZH7XK2zVQ/mhwV+0XKJ",
	"ffuuOsj7QX1oMKqlj1VQL1shXfFtA090N2D+OnPKOqYOh7v54e52PAVDwuMr6DbazSkd4uxGr9EQIPUU",
	"LHvC0iGg78F2DtVJXp0MC+b59xXjJUt6q5UPKciT68ubFKLdSpVi4oYQqmCqCyFfy5l/jy/cRyuQ9Uu4",
	"AFJlsSLbBJDlgs0M6Dj/pq8/Q/poQLv7v3a5bmDPgPbfHx2yDJ9lCOG+DHFCqaiilH9nknH+mCqNW6Tf",
	"48HErtIsVQdu5R/STVdse+w4HNBQ91bg4rU9DC7tZftl0sBLV4RPMoE8ZRpDG5xHhR/oCvJZMeegTs1v",
	"D8ddeORJGx7fEDi8arcBw0+m74vEsc7FlYqYqH3g6cfWvuCchKGw4xbK4OTd8fGfQmo5yRdrfNkLyEgJ",
	"QrPOT12cWQVPPS27bWSuO7VJtgZCG1EpgCbhBUjQTLSS+c/zmjT1bK2NskhQmrTFzXj73vIr4SaZO7Vu",
	"o/Entk2Csp+9jajSaLK6Xf0vAAD//8gMgO3eRAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
