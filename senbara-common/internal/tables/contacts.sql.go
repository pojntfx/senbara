// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package tables

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
insert into contacts (
        first_name,
        last_name,
        nickname,
        email,
        pronouns,
        namespace
    )
values ($1, $2, $3, $4, $5, $6)
returning id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
`

type CreateContactParams struct {
	FirstName string
	LastName  string
	Nickname  string
	Email     string
	Pronouns  string
	Namespace string
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.Email,
		arg.Pronouns,
		arg.Namespace,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Email,
		&i.Pronouns,
		&i.Namespace,
		&i.Birthday,
		&i.Address,
		&i.Notes,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :one
delete from contacts
where id = $1
    and namespace = $2
returning id
`

type DeleteContactParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteContact, arg.ID, arg.Namespace)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContactsForNamespace = `-- name: DeleteContactsForNamespace :many
delete from contacts
where namespace = $1
returning id
`

func (q *Queries) DeleteContactsForNamespace(ctx context.Context, namespace string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, deleteContactsForNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContact = `-- name: GetContact :one
select id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
from contacts
where id = $1
    and namespace = $2
`

type GetContactParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) GetContact(ctx context.Context, arg GetContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, arg.ID, arg.Namespace)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Email,
		&i.Pronouns,
		&i.Namespace,
		&i.Birthday,
		&i.Address,
		&i.Notes,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
select id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
from contacts
where namespace = $1
order by first_name desc
`

func (q *Queries) GetContacts(ctx context.Context, namespace string) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Nickname,
			&i.Email,
			&i.Pronouns,
			&i.Namespace,
			&i.Birthday,
			&i.Address,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactsExportForNamespace = `-- name: GetContactsExportForNamespace :many
select 'contacts' as table_name,
    id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
from contacts
where namespace = $1
order by first_name desc
`

type GetContactsExportForNamespaceRow struct {
	TableName string
	ID        int32
	FirstName string
	LastName  string
	Nickname  string
	Email     string
	Pronouns  string
	Namespace string
	Birthday  sql.NullTime
	Address   string
	Notes     string
}

func (q *Queries) GetContactsExportForNamespace(ctx context.Context, namespace string) ([]GetContactsExportForNamespaceRow, error) {
	rows, err := q.db.QueryContext(ctx, getContactsExportForNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContactsExportForNamespaceRow
	for rows.Next() {
		var i GetContactsExportForNamespaceRow
		if err := rows.Scan(
			&i.TableName,
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Nickname,
			&i.Email,
			&i.Pronouns,
			&i.Namespace,
			&i.Birthday,
			&i.Address,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
update contacts
set first_name = $3,
    last_name = $4,
    nickname = $5,
    email = $6,
    pronouns = $7,
    birthday = $8,
    address = $9,
    notes = $10
where id = $1
    and namespace = $2
returning id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
`

type UpdateContactParams struct {
	ID        int32
	Namespace string
	FirstName string
	LastName  string
	Nickname  string
	Email     string
	Pronouns  string
	Birthday  sql.NullTime
	Address   string
	Notes     string
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.Namespace,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.Email,
		arg.Pronouns,
		arg.Birthday,
		arg.Address,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Email,
		&i.Pronouns,
		&i.Namespace,
		&i.Birthday,
		&i.Address,
		&i.Notes,
	)
	return i, err
}
