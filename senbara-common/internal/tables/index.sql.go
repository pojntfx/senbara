// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: index.sql

package tables

import (
	"context"
)

const countAllContactsAndJournalEntries = `-- name: CountAllContactsAndJournalEntries :one
select (
        select count(*)
        from contacts
    ) as contact_count,
    (
        select count(*)
        from journal_entries
    ) as journal_entries_count
`

type CountAllContactsAndJournalEntriesRow struct {
	ContactCount        int64
	JournalEntriesCount int64
}

func (q *Queries) CountAllContactsAndJournalEntries(ctx context.Context) (CountAllContactsAndJournalEntriesRow, error) {
	row := q.db.QueryRowContext(ctx, countAllContactsAndJournalEntries)
	var i CountAllContactsAndJournalEntriesRow
	err := row.Scan(&i.ContactCount, &i.JournalEntriesCount)
	return i, err
}

const countContactsAndJournalEntries = `-- name: CountContactsAndJournalEntries :one
select (
        select count(*)
        from contacts
        where contacts.namespace = $1
    ) as contact_count,
    (
        select count(*)
        from journal_entries
        where journal_entries.namespace = $1
    ) as journal_entries_count
`

type CountContactsAndJournalEntriesRow struct {
	ContactCount        int64
	JournalEntriesCount int64
}

func (q *Queries) CountContactsAndJournalEntries(ctx context.Context, namespace string) (CountContactsAndJournalEntriesRow, error) {
	row := q.db.QueryRowContext(ctx, countContactsAndJournalEntries, namespace)
	var i CountContactsAndJournalEntriesRow
	err := row.Scan(&i.ContactCount, &i.JournalEntriesCount)
	return i, err
}
